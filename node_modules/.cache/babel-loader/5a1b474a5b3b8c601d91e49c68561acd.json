{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minnie\\\\VSCode Workspace\\\\React Projects\\\\forms-and-user-input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    resetInput: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    resetInput: resetEmailInput\n  } = useInput(value => value.includes('@'));\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } //Handlers\n\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  }; //Submission Handler\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"Entered Name\", enteredName);\n    console.log(\"Entered Email\", enteredEmail); //RESET INPUTS\n\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"k5WOAh7/qv6CBOLmjf/d/iJGmjo=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\nonBlur() - Used when something looses focus.\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","resetInput","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangedHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","emailInputChangeHandler","event","setEnteredEmail","target","emailInputBlurHandler","setEnteredEmailTouched","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses","emailInputIsInvalid"],"sources":["C:/Users/Minnie/VSCode Workspace/React Projects/forms-and-user-input/src/components/SimpleInput.js"],"sourcesContent":["import {useState} from 'react';\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    resetInput: resetNameInput,\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    resetInput:resetEmailInput,\n  } = useInput(value => value.includes('@'));\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } \n\n  //Handlers\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler =  event => {\n    setEnteredEmailTouched(true);\n  };\n\n  //Submission Handler\n  const formSubmissionHandler = event => {\n\n    event.preventDefault();\n\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"Entered Name\", enteredName);\n    console.log(\"Entered Email\", enteredEmail);\n\n    //RESET INPUTS\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  \n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' \n        id='name' \n        onChange={nameChangedHandler}\n        onBlur={nameBlurHandler}\n        value={enteredName}\n        />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='name'>Your Email</label>\n        <input \n        type='email' \n        id='email' \n        onChange={emailInputChangeHandler}\n        onBlur={emailInputBlurHandler}\n        value={enteredEmail}\n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Enter a valid email.</p>}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\nonBlur() - Used when something looses focus.\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}