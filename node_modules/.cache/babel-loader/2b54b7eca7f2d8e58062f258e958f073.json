{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minnie\\\\VSCode Workspace\\\\React Projects\\\\forms-and-user-input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  //ref\n  const nameInputRef = useRef(); //state\n\n  const [enteredName, setEnteredName] = useState(''); //providing validation feedback\n\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true);\n  useEffect; //state\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //basic validation\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(\"Use State method\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"Use Ref method\", enteredValue); //Setting input back to blank\n\n    nameInputRef.current.value = ''; //bad because your directly manipulating the dom\n\n    setEnteredName('');\n  };\n\n  const nameInputClasses = enteredNameIsValid ? 'form-control' : 'form-control invalid';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), !enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"sXQoJW1WsTxf+potPsBjU2NDuCg=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","console","log","enteredValue","current","nameInputClasses"],"sources":["C:/Users/Minnie/VSCode Workspace/React Projects/forms-and-user-input/src/components/SimpleInput.js"],"sourcesContent":["import {useEffect, useRef, useState} from 'react';\n\nconst SimpleInput = (props) => {\n\n  //ref\n  const nameInputRef = useRef();\n\n  //state\n  const [enteredName, setEnteredName] = useState('');\n\n  //providing validation feedback\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(true);\n\n  useEffect\n\n  //state\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    //basic validation\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n\n    console.log(\"Use State method\", enteredName);\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"Use Ref method\", enteredValue);\n\n    //Setting input back to blank\n    nameInputRef.current.value = ''; //bad because your directly manipulating the dom\n    setEnteredName('');\n\n  };\n\n  const nameInputClasses = enteredNameIsValid ? 'form-control' : 'form-control invalid';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        ref={nameInputRef} \n        type='text' id='name' \n        onChange={nameInputChangeHandler}\n        value={enteredName}\n        />\n        {!enteredNameIsValid && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\n*/"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAE7B;EACA,MAAMC,YAAY,GAAGJ,MAAM,EAA3B,CAH6B,CAK7B;;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C,CAN6B,CAQ7B;;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,IAAD,CAA5D;EAEAF,SAAS,CAXoB,CAa7B;;EACA,MAAMU,sBAAsB,GAAGC,KAAK,IAAI;IACtCJ,cAAc,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACD,CAFD;;EAIA,MAAMC,qBAAqB,GAAGH,KAAK,IAAI;IACrCA,KAAK,CAACI,cAAN,GADqC,CAGrC;;IACA,IAAIT,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BP,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IACDA,qBAAqB,CAAC,IAAD,CAArB;IAEAQ,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCZ,WAAhC;IAEA,MAAMa,YAAY,GAAGd,YAAY,CAACe,OAAb,CAAqBP,KAA1C;IACAI,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,YAA9B,EAbqC,CAerC;;IACAd,YAAY,CAACe,OAAb,CAAqBP,KAArB,GAA6B,EAA7B,CAhBqC,CAgBJ;;IACjCN,cAAc,CAAC,EAAD,CAAd;EAED,CAnBD;;EAqBA,MAAMc,gBAAgB,GAAGb,kBAAkB,GAAG,cAAH,GAAoB,sBAA/D;EAEA,oBACE;IAAM,QAAQ,EAAEM,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEO,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACA,GAAG,EAAEhB,YADL;QAEA,IAAI,EAAC,MAFL;QAEY,EAAE,EAAC,MAFf;QAGA,QAAQ,EAAEK,sBAHV;QAIA,KAAK,EAAEJ;MAJP;QAAA;QAAA;QAAA;MAAA,QAFF,EAQG,CAACE,kBAAD,iBAAuB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAR1B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CA1DD;;GAAML,W;;KAAAA,W;AA4DN,eAAeA,WAAf;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}