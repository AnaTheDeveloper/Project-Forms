{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minnie\\\\VSCode Workspace\\\\React Projects\\\\forms-and-user-input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  //States\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnterednameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); //Validation\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredNameIsValid && enteredEmailTouched; //Overall form validity\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } //Handlers\n\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  }; //Blue Handlers\n\n\n  const nameInputBlurHandler = event => {\n    setEnterednameTouched(true);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  }; //Submission Handler\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnterednameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"Entered Name\", enteredName);\n    console.log(\"Entered Email\", enteredEmail); //After submission reset inputs to blank\n\n    setEnteredName('');\n    setEnterednameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"8MUNiJOwMl58jVycSR0773kmF08=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\nonBlur() - Used when something looses focus.\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnterednameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","emailInputChangeHandler","nameInputBlurHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["C:/Users/Minnie/VSCode Workspace/React Projects/forms-and-user-input/src/components/SimpleInput.js"],"sourcesContent":["import {useState} from 'react';\n\nconst SimpleInput = (props) => {\n\n  //States\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnterednameTouched] = useState(false);\n  \n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  //Validation\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredNameIsValid && enteredEmailTouched;\n\n  //Overall form validity\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } \n\n  //Handlers\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n  \n  //Blue Handlers\n  const nameInputBlurHandler =  event => {\n    setEnterednameTouched(true);\n  };\n\n  const emailInputBlurHandler =  event => {\n    setEnteredEmailTouched(true);\n  };\n\n  //Submission Handler\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnterednameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"Entered Name\", enteredName);\n    console.log(\"Entered Email\", enteredEmail);\n\n    //After submission reset inputs to blank\n    setEnteredName('');\n    setEnterednameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' \n        id='name' \n        onChange={nameInputChangeHandler}\n        onBlur={nameInputBlurHandler}\n        value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='name'>Your Email</label>\n        <input \n        type='email' \n        id='email' \n        onChange={emailInputChangeHandler}\n        onBlur={emailInputBlurHandler}\n        value={enteredEmail}\n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Enter a valid email.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nThere are two ways we can fetch the entered value.\n1. We can listen to every keystroke and store the value in some state variable.\n2. We can use useRef to fetch the input once the user is done typing in a value.\n\nonBlur() - Used when something looses focus.\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}